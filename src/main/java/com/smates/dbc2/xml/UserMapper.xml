<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.smates.dbc2.mapper.UserDao" >

  <resultMap id="BaseResultMap" type="user" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="accountNumber" property="accountNumber" jdbcType="CHAR" />
    <result column="nickName" property="nickName" jdbcType="CHAR" />
    <result column="password" property="password" jdbcType="CHAR" />
    <result column="role" property="role" jdbcType="INTEGER" />
    <result column="enable" property="enable" jdbcType="CHAR" />
    <result column="createDate" property="createDate" jdbcType="CHAR" />
    <result column="e_mail" property="eMail" jdbcType="CHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, accountNumber,nickName, password, role, enable, createDate, e_mail
  </sql>
  
  <!--
 	 des:
 	 	根据accountNumber查找user
 	 example sql:
	 	 select *
	 	 from s_user
		 where accountNumber = admin
  -->
  <select id="selectByAccountNumber" resultMap="BaseResultMap" parameterType="java.lang.String">
  select *
  from s_user
  where accountNumber = #{accountNumber}
  </select>
  
  <!-- 
  	des:
  		根据id查user
  	example sql：
  		select *
	 	 from s_user
		 where id = 8
   -->
  <select id = "getUserById" parameterType="int" resultMap="BaseResultMap">
  select *
  from s_user
  where id = #{value}
  </select>
  
  
  
  
  <!--  
  	des:
  		像s_user表中插入数据
  	example sql:
  		insert into s_user 
		(accountNumber,nickName, password, role, enable, createDate, e_mail)
	    values 
		("tangshilong","汤士龙",123456,1,"可用",2016-07-18,"834848102@qq.com")
  -->
  <insert id = "insertUser" parameterType="user" useGeneratedKeys="true" keyProperty="id">
  insert into s_user 
  (accountNumber,nickName, password, role, enable, createDate, e_mail)
  values 
  (#{accountNumber},N#{nickName},#{password},#{role},#{enable},#{createDate},#{eMail})
  </insert>
  
  <!-- 
  	des:
  		根据accountNumber和nickName获取所用用户信息
  	example sql:
  		 select *
 		 from s_user a
 		 where a.accountNumber like '%tangshi%' and and a.nickName like '%汤%'
 		 limit 0,10
   -->
  <select id = "getAllUser" resultMap="BaseResultMap" parameterType = "com.smates.dbc2.vo.CostumUser">
  select *
  from s_user a
  <where>
  	  	<if test = "accountNumber!=null" >
  	  		a.accountNumber like '%${accountNumber}%'
  	  	</if>
  	  	<if test = "nickName!=null" >
  	  		and a.nickName like '%${nickName}%'
  	  	</if>
  	</where>
  limit #{startCount},#{rows}
  </select>
  
  <!--  
  	des:
  		获取用户数量
  	example sql：
  		 select count(*)
 		 from s_user
  -->
  <select id = "getUserCount" resultType = "Int">
  	select count(*)
  	from s_user
  </select>
  
  
  <!-- 
  	des:
  		根据accountNumber删除user
  	examp sql：
  		delete
  		from s_user  
  		where accountNumber = 'tangs'
   -->
  <delete id = "deleteUser" parameterType = "String">
  	delete
  	from s_user  
  	where accountNumber = #{value}
  </delete>
  
  <!-- 
 	des:
 		根据用户id更新用户信息
 	examp sql：
 	    UPDATE s_user
		SET 
		accountNumber = "xiaohua",
		nickName = "小花",
		PASSWORD = "123456",
		role = 1,
		ENABLE = "可用",
		e_mail = "834848102@qq.com"
		WHERE
		id = 8
   -->
  <update id="updateUser" parameterType="user">
  	update s_user
  	set accountNumber = #{accountNumber},nickName=#{nickName},password=#{password},
  	role=#{role},enable=#{enable},eMail=#{eMail}
  	where id=#{id}
  </update>
  
  
  
  
  
  
  <!--  自动生成
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
   
    from s_user
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from s_user
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="user" >
    insert into s_user (id, user_name, password, 
      role, enable, createdate, e_mail
      )
    values (#{id,jdbcType=CHAR}, #{userName,jdbcType=CHAR}, #{password,jdbcType=CHAR}, 
      #{role,jdbcType=CHAR}, #{enable,jdbcType=CHAR}, #{createdate,jdbcType=DATE}, #{eMail,jdbcType=CHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="user" >
    insert into s_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userName != null" >
        user_name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="role != null" >
        role,
      </if>
      <if test="enable != null" >
        enable,
      </if>
      <if test="createdate != null" >
        createdate,
      </if>
      <if test="eMail != null" >
        e_mail,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=CHAR},
      </if>
      <if test="userName != null" >
        #{userName,jdbcType=CHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=CHAR},
      </if>
      <if test="role != null" >
        #{role,jdbcType=CHAR},
      </if>
      <if test="enable != null" >
        #{enable,jdbcType=CHAR},
      </if>
      <if test="createdate != null" >
        #{createdate,jdbcType=DATE},
      </if>
      <if test="eMail != null" >
        #{eMail,jdbcType=CHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="user" >
    update s_user
    <set >
      <if test="userName != null" >
        user_name = #{userName,jdbcType=CHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=CHAR},
      </if>
      <if test="role != null" >
        role = #{role,jdbcType=CHAR},
      </if>
      <if test="enable != null" >
        enable = #{enable,jdbcType=CHAR},
      </if>
      <if test="createdate != null" >
        createdate = #{createdate,jdbcType=DATE},
      </if>
      <if test="eMail != null" >
        e_mail = #{eMail,jdbcType=CHAR},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="user" >
    update s_user
    set user_name = #{userName,jdbcType=CHAR},
      password = #{password,jdbcType=CHAR},
      role = #{role,jdbcType=CHAR},
      enable = #{enable,jdbcType=CHAR},
      createdate = #{createdate,jdbcType=DATE},
      e_mail = #{eMail,jdbcType=CHAR}
    where id = #{id,jdbcType=CHAR}
  </update>
  
  <select id="findAllUser" resultType="user" >
  	select user_id,
  	from s_user
  </select>
  -->
  
</mapper>